const domain = {
    name: 'Ether Mail',
    version: '1',
    chainId: 1,
    verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC'
};

// The named list of all type definitions
const types = {
    Person: [
        { name: 'name', type: 'string' },
        { name: 'wallet', type: 'address' }
    ],
    Mail: [
        { name: 'from', type: 'Person' },
        { name: 'to', type: 'Person' },
        { name: 'contents', type: 'string' }
    ]
};

// The data to sign
const value = {
    from: {
        name: 'Cow',
        wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826'
    },
    to: {
        name: 'Bob',
        wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB'
    },
    contents: 'Hello, Bob!'
};

signature = await signer._signTypedData(domain, types, value);



const estimateGas = await this.pool.contractInstance.estimateGas.cook(
        [24, 5, 21, 20, 10],
        [0, 0, 0, 0, 0],
        [
          approvalEncode,
          borrowEncode,
          bentoWithdrawEncode,
          depositEncode,
          colateralEncode,
        ],
        {
          value: "0",
          // gasPrice,
          // gasLimit: 1000000,
        }
      );


      // // Function which allows to convert any address to the signer which can sign transactions in a test
// const impersonateAddress = async (address) => {
//     const hre = require('hardhat');
//     await hre.network.provider.request({
//       method: 'hardhat_impersonateAccount',
//       params: [address],
//     });
//     const signer = await ethers.provider.getSigner(address);
//     signer.address = signer._address;
//     return signer;
//   };
//   // Function to increase time in mainnet fork
//   async function increaseTime(value) {
//     if (!ethers.BigNumber.isBigNumber(value)) {
//       value = ethers.BigNumber.from(value);
//     }
//     await ethers.provider.send('evm_increaseTime', [value.toNumber()]);
//     await ethers.provider.send('evm_mine');
//   }